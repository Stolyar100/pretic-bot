import { InlineKeyboard, Keyboard } from 'grammy'
import { PretikContext } from '../../types/index.js'
import { offerMenuData } from './offer-controller.js'
import { OfferStatus, Prisma } from '@prisma/client'
const departments = [
  '–Ü–¢',
  '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
  '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Ä–æ–∑–≤–∏—Ç–∫—É',
  '–û–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è',
  '–ü—Ä–∞–≤–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è',
  '–ü–µ—Ä—Å–æ–Ω–∞–ª',
  '–í —Å—É—Å—ñ–¥–Ω—î —Å–µ–ª–æ',
] as const

export const cancelButtonText = '–ô–æ–π, –Ω—î'
export const editButtonText = '–ô–æ–π, —à–æ—Å—å –Ω–µ —Ç–æ! –í–µ—Ä–Ω—É—Ç–∏—Å—å'
export const submitButtonText = '–§–∞–π–Ω–æ —î'

export const cancelButtonRow = [[Keyboard.text(cancelButtonText)]]
export const editButtonRow = [[Keyboard.text(editButtonText)]]
export const submitButtonRow = [[Keyboard.text(submitButtonText)]]

export const cancelKeyboard = Keyboard.from(cancelButtonRow).resized()
export const departmentKeyboard = Keyboard.from(
  departments.map((departmentLabel) => [Keyboard.text(departmentLabel)])
)
  .resized()
  .toFlowed(2)
  .append(cancelKeyboard)
export const editSubmitKeyboard = Keyboard.from([
  ...editButtonRow,
  ...submitButtonRow,
])
  .resized()
  .toFlowed(2)
  .append(cancelKeyboard)

export const offerDraftMap: PretikContext['session']['offerDraft'] = {
  content: '–ó–º—ñ—Å—Ç',
  reasons: '–ü–µ—Ä–µ–¥—É–º–æ–≤–∏',
  responsibleDepartment: '–í —á–∏–π –≥–æ—Ä–æ–¥',
  shortName: '–ö–æ—Ä–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞',
  solvesProblem: '–í–∏—Ä—ñ—à—É—î –ø—Ä–æ–±–ª–µ–º—É',
} as const

export const offerFieldLabels = Object.values(offerDraftMap)

export const selectOfferFieldKeyboard = Keyboard.from(
  offerFieldLabels.map((offerFieldLabel) => [Keyboard.text(offerFieldLabel)])
)
  .resized()
  .toFlowed(2)
  .append(cancelKeyboard)

export const offerLimitWarning =
  '–ü–æ–±—ñ–π—Å—è –ë–æ–≥–∞, –ø—ñ–∑–Ω—ñ—à–µ –ø–æ–±–∞–ª–∞–∫–∞—î–º! –ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –¥–æ—Å–∏—Ç—å, –ø—Ä–æ–¥–æ–≤–∂–∏—à –∑–∞–≤—Ç—Ä–∞, —ñ–¥–∏ –ø—Ä–∞—Ü—é–π'

export function _renderOfferMessage(
  offerDraft: PretikContext['session']['offerDraft']
) {
  const offerMessage = `
      –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—èüì• 
  
      <b><i>${offerDraft.shortName}</i></b>
  
      <b>–ü–µ—Ä–µ–¥—É–º–æ–≤–∏/–ø—Ä–∏—á–∏–Ω–∏/–æ–±–≥—Ä—É–Ω—Ç—É–≤–∞–Ω–Ω—è:</b> 
      ${offerDraft.reasons}
  
      <b>–ó–º—ñ—Å—Ç:</b> 
      ${offerDraft.content}
      
      <b>–Ø–∫—É –ø—Ä–æ–±–ª–µ–º—É —Ü–µ –≤–∏—Ä—ñ—à–∏—Ç—å –∞–±–æ —â–æ –ø–æ–∫—Ä–∞—â–∏—Ç—å?:</b> 
      ${offerDraft.solvesProblem}
      
      <b>–ù—É —ñ –≤ —á–∏–π –≥–æ—Ä–æ–¥ —Ü–µ–π –∫–∞–º—ñ–Ω—å?:</b> 
      ${offerDraft.responsibleDepartment}`

  return _deleteCodeIndentation(offerMessage).trim()
}

function _deleteCodeIndentation(text: string) {
  return text.replace(/[^\S\r\n][^\S\r\n]+/g, '')
}

export const offerNotFoundText = '–ô–æ–π, –Ω–µ–º–∞ —Ç–∞–∫–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ'
export const offerAcceptedText = '–§–∞–π–Ω–æ —î, –ø—É–±–ª—ñ–∫—É—î–º'
export const offerRejectedText = '–ô–æ–π, –≥–µ—Ç—å —Ç–æ—Ç–æ'

const offerAcceptText = '–ü—É–±–ª—ñ–∫—É–≤–∞—Ç–∏'
const offerRejectText = '–í—ñ–¥—Ö–∏–ª–∏—Ç–∏'

export function _generateOfferInline(offerId: offerMenuData['id']) {
  const acceptData: offerMenuData = {
    id: offerId,
    name: 'OfferStatus',
    action: 'ACCEPT',
  }
  const rejectData: offerMenuData = {
    id: offerId,
    name: 'OfferStatus',
    action: 'REJECT',
  }

  const acceptButtonPayload = JSON.stringify(acceptData)
  const rejectButtonPayload = JSON.stringify(rejectData)

  const offerInlineKeyboard = new InlineKeyboard()
    .text(offerAcceptText, acceptButtonPayload)
    .text(offerRejectText, rejectButtonPayload)

  return offerInlineKeyboard
}

export const requiresAdminText = '–ê —Ç–∏ —Ç–æ—á–Ω–æ –∞–¥–º—ñ–Ω?'

export function _generateStatistic(
  pendingCount = 0,
  rejectedCount = 0,
  acceptedCount = 0
) {
  return `–ù–∞ —Ä–æ–∑–≥–ª—è–¥—ñ üîÑ: ${pendingCount} \n–ü—Ä–∏–π–Ω—è—Ç–æ ‚úÖ: ${acceptedCount} \n–í—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå: ${rejectedCount}`
}

export const offerPreviousText = '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'
export const offerNextText = '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è'
export const offerCloseText = '–ó–∞–∫—Ä–∏—Ç–∏ ‚ùå'
export const paginationLimitText = '–ß—à—à—à, —Ç–∏—Ö–æ'

const OfferMenuStatusText: Record<OfferStatus, (shortName: string) => string> =
  {
    PENDING: (shortName) => `üîÑ –ù–∞ —Ä–æ–∑–≥–ª—è–¥—ñ - ${shortName} `,
    ACCEPTED: (shortName) => `‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ - ${shortName}`,
    REJECTED: (shortName) => `‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ - ${shortName}`,
  }

export function _generateStatus(
  offerStatus: Prisma.OfferGetPayload<{
    select: { shortName: true; status: true }
  }>[],
  page: number,
  pagesCount: number
) {
  const statusString = offerStatus
    .map(({ shortName, status }) => OfferMenuStatusText[status](shortName))
    .join('\n')

  const statusMessage = `
    –¢–≤–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó ${page + 1}/${pagesCount}:

    ${statusString}
    
    `
  return _deleteCodeIndentation(statusMessage)
}

export const offerUpdateNotification: Record<
  Exclude<OfferStatus, 'PENDING'>,
  (shortName: string) => string
> = {
  ACCEPTED: (shortName) =>
    `–ü—Ä–∏–≤—ñ—Ç! PRETik –Ω–∞ –∑–≤'—è–∑–∫—É. –ú–∞—é –Ω–æ–≤–∏–Ω–∏! –°—Ç–∞—Ç—É—Å —Ç–≤–æ—î—ó —ñ–Ω—ñ—Ü—ñ–∞—Ç–∏–≤–∏ ¬´${shortName}¬ª –∑–º—ñ–Ω–∏–≤—Å—è –Ω–∞ ¬´–ü—Ä–∏–π–Ω—è—Ç–æ¬ª. –ù—É —Ç–∏ —Å—Ç—Ä–∞—à–Ω–∏–π —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç. –õ—é–∫—Å! –î–∞–≤–∞–π —â–µ!`,
  REJECTED: (shortName) =>
    `–ü—Ä–∏–≤—ñ—Ç! PRETik –Ω–∞ –∑–≤'—è–∑–∫—É. –ú–∞—é –Ω–æ–≤–∏–Ω–∏! –°—Ç–∞—Ç—É—Å —Ç–≤–æ—î—ó —ñ–Ω—ñ—Ü—ñ–∞—Ç–∏–≤–∏ ¬´${shortName}¬ª –∑–º—ñ–Ω–∏–≤—Å—è –Ω–∞ ¬´–í—ñ–¥—Ö–∏–ª–µ–Ω–æ¬ª.  –ê –Ω–∞–π —ó—Ö –∫–∞—á–∫–∞ –∫–æ–ø–Ω–µ! –§–æ—Ä—Ç—É–Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –ø–æ–≤–µ—Ä–Ω—É–ª–∞—Å—å –Ω–µ —Ç–∏–º –±–æ–∫–æ–º, –Ω—É –Ω—ñ—á–æ–≥–æ, –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É –ø–æ—â–∞—Å—Ç–∏—Ç—å. –í—Å–µ –æ–¥–Ω–æ, —Ç–∏ ‚Äì –º–æ–ª–æ–¥–µ—Ü—å! –í—ñ—Ä—é –≤ —Ç–µ, —â–æ —Ç–∏ —â–µ –¥–æ –º–µ–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ—à—Å—è! –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!`,
}
